##############################################
# Created from template ros2.dockerfile.jinja
##############################################

###########################################
# Base image 
###########################################
FROM {{ base_image }}:{{ image_version }} AS build_source

ENV DEBIAN_FRONTEND=noninteractive

{% include 'snippits/language.jinja' %}

{% include 'snippits/timezone.jinja' %}

# Add the ROS 2 apt repository
RUN apt-get update && apt-get install -y \
    curl \
    gnupg2 \
    lsb-release \
    sudo \
  && curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg \
  && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null 
# Install development tools and ROS tools
RUN apt-get update && apt-get install -y \
    python3-flake8-docstrings \
    python3-pip \
    python3-pytest-cov \
    python3-argcomplete \
    ros-dev-tools \
{% if "22.04" in image_version -%}
    python3-flake8-blind-except \
    python3-flake8-builtins \
    python3-flake8-class-newline \
    python3-flake8-comprehensions \
    python3-flake8-deprecated \
    python3-flake8-import-order \
    python3-flake8-quotes \
    python3-pytest-repeat \
    python3-pytest-rerunfailures \
{%- else -%}
    && python3 -m pip install -U \
        flake8-blind-except \
        flake8-builtins \
        flake8-class-newline \
        flake8-comprehensions \
        flake8-deprecated \
        flake8-import-order \
        flake8-quotes \
        pytest-repeat \
        pytest-rerunfailures \
{%- endif %}
  && rm -rf /var/lib/apt/lists/*

# Get ROS 2 code
RUN mkdir -p ~/ros2_{{ ros_distro }}/src \
  && cd ~/ros2_{{ ros_distro }} \
  && wget https://raw.githubusercontent.com/ros2/ros2/{{ ros_distro }}/ros2.repos \
  && vcs import src < ros2.repos

# Install dependencies using rosdep

RUN apt upgrade \
    && cd ~/ros2_{{ ros_distro }} \
    && rosdep init \
    && rosdep update \
    && echo ${pwd}
    && rosdep install --from-paths src --ignore-src -y --skip-keys "fastcdr rti-connext-dds-{% if ros_distro == "humble" -%}6.0.1{%- else -%}5.3.1{%- endif %} urdfdom_headers"

# Build the code
RUN cd ~/ros2_{{ ros_distro }} \
  && colcon build --symlink-install --install-base /opt/ros/{{ ros_distro }} --cmake-args -DCMAKE_BUILD_TYPE=Release
  
ENV ROS_DISTRO={{ ros_distro }}
ENV AMENT_PREFIX_PATH=/opt/ros/{{ ros_distro }}
ENV COLCON_PREFIX_PATH=/opt/ros/{{ ros_distro }}
ENV LD_LIBRARY_PATH=/opt/ros/{{ ros_distro }}/lib
ENV PATH=/opt/ros/{{ ros_distro }}/bin:$PATH
ENV PYTHONPATH=/opt/ros/{{ ros_distro }}/lib/python{{ python_version }}/site-packages
ENV ROS_PYTHON_VERSION=3
ENV ROS_VERSION=2
ENV DEBIAN_FRONTEND=

###########################################
# Base image 
###########################################
FROM {{ base_image }}:{{ image_version }} AS base

ENV DEBIAN_FRONTEND=noninteractive

{% include 'snippits/language.jinja' %}

{% include 'snippits/timezone.jinja' %}

# Install ROS2
RUN apt-get update && apt-get install -y \
    curl \
    gnupg2 \
    lsb-release \
    sudo \
  && curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg \
  && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null \
  && apt-get update && apt-get install -y \
    ros-{{ ros_distro }}-ros-base \
    python3-argcomplete \
  && rm -rf /var/lib/apt/lists/*

ENV ROS_DISTRO={{ ros_distro }}
ENV AMENT_PREFIX_PATH=/opt/ros/{{ ros_distro }}
ENV COLCON_PREFIX_PATH=/opt/ros/{{ ros_distro }}
ENV LD_LIBRARY_PATH=/opt/ros/{{ ros_distro }}/lib
ENV PATH=/opt/ros/{{ ros_distro }}/bin:$PATH
ENV PYTHONPATH=/opt/ros/{{ ros_distro }}/lib/python{{ python_version }}/site-packages
ENV ROS_PYTHON_VERSION=3
ENV ROS_VERSION=2
ENV DEBIAN_FRONTEND=

###########################################
#  Develop image 
###########################################
FROM base AS dev

ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install -y \
  bash-completion \
  build-essential \
  cmake \
  gdb \
  git \
  {% if ros_distro == "humble" -%}pylint \
  {%- else %}pylint3 \{% endif %}
  python3-argcomplete \
  python3-colcon-common-extensions \
  python3-pip \
  python3-rosdep \
  python3-vcstool \
  vim \
  wget \
  # Install ros distro testing packages
  ros-{{ ros_distro }}-ament-lint \
  ros-{{ ros_distro }}-launch-testing \
  ros-{{ ros_distro }}-launch-testing-ament-cmake \
  ros-{{ ros_distro }}-launch-testing-ros \
  {% if ros_distro == "dashing" -%}python-autopep8 \
  {%- elif ros_distro == "eloquent" -%}python-autopep8 \
  {%- else %}python3-autopep8 \{% endif %}
  && rm -rf /var/lib/apt/lists/* \
  && rosdep init || echo "rosdep already initialized" \
  # Update pydocstyle
  && pip install --upgrade pydocstyle

{% include 'snippits/ros_user.jinja' %}

ENV DEBIAN_FRONTEND=
ENV AMENT_CPPCHECK_ALLOW_SLOW_VERSIONS=1

###########################################
#  Full image 
###########################################
FROM dev AS full

ENV DEBIAN_FRONTEND=noninteractive
# Install the full release
RUN apt-get update && apt-get install -y \
  ros-{{ ros_distro }}-desktop \
  && rm -rf /var/lib/apt/lists/*
ENV DEBIAN_FRONTEND=

###########################################
#  Full+Gazebo image 
###########################################
FROM full AS gazebo

ENV DEBIAN_FRONTEND=noninteractive
# Install gazebo
RUN apt-get update && apt-get install -q -y \
  lsb-release \
  wget \
  gnupg \
  sudo \
  && wget https://packages.osrfoundation.org/gazebo.gpg -O /usr/share/keyrings/pkgs-osrf-archive-keyring.gpg \
  && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/pkgs-osrf-archive-keyring.gpg] http://packages.osrfoundation.org/gazebo/ubuntu-stable $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/gazebo-stable.list > /dev/null \
  && apt-get update && apt-get install -q -y \
    ros-{{ ros_distro }}-gazebo* \
  && rm -rf /var/lib/apt/lists/*
ENV DEBIAN_FRONTEND=

###########################################
#  Full+Gazebo+Nvidia image 
###########################################

FROM gazebo AS gazebo-nvidia

{% include 'snippits/nvidia.jinja' %}
